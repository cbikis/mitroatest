import{G as c,A as n}from"./app-C4nfOcqx.js";const l=c("institutes",{state:()=>({institutes:[],currentPage:1,perPage:5,sortColumn:null,sortDirection:"asc",searchId:"",selectedCountryName:null,selectedShowInstitutes:null,showData:!1,searchInstituteText:"",franchiseFilter:"all"}),getters:{filteredInstitutes:t=>t.institutes.filter(e=>{const s=t.searchId?e.id.toString().startsWith(t.searchId):!0,i=t.selectedCountryName&&t.selectedCountryName!=="-1"?e.country.toLowerCase()===t.selectedCountryName.toLowerCase():!0,r=t.searchInstituteText?[e.institute,e.institute_el,e.institute_original].filter(a=>a!=null).map(a=>a.toLowerCase()).some(a=>a.includes(t.searchInstituteText.toLowerCase())):!0;let o=!0;return t.franchiseFilter==="yes"?o=e.franchise===1:t.franchiseFilter==="no"&&(o=e.franchise===0),s&&i&&r&&o}),paginatedInstitutes(){const t=(this.currentPage-1)*this.perPage,e=t+this.perPage;return this.filteredInstitutes.slice(t,e)},totalPages(){return Math.ceil(this.filteredInstitutes.length/this.perPage)}},actions:{broadcastUpdate(t){const e=new BroadcastChannel("institute_updates");e.postMessage({type:"UPDATE_INSTITUTE",payload:t}),e.close()},broadcastEdit(t){const e=new BroadcastChannel("institute_edit");e.postMessage({type:"EDIT_INSTITUTE",payload:t}),e.close()},broadcastLoadInstitutes(t){const e=new BroadcastChannel("institutes_loaded");e.postMessage({type:"LOAD_INSTITUTES",payload:t}),e.close()},async editInstitute(t,e){return await n.put(`/api/edit-foreign-institute/${t.institute_id}`,e)},async fetchInstitutes(t=!1){if(this.institutes.length===0||t)try{const e=await n.get("/api/foreign-institutes");this.institutes=e.data}catch(e){console.error("Error fetching institutes:",e)}},sortTable(t){this.sortColumn===t?this.sortDirection=this.sortDirection==="asc"?"desc":"asc":(this.sortColumn=t,this.sortDirection="asc"),this.institutes.sort((e,s)=>{let i=e[t],r=s[t];return!isNaN(Number(i))&&!isNaN(Number(r))?(i=Number(i),r=Number(r)):(i=i!=null?i.toString().trim():"",r=r!=null?r.toString().trim():"",i=i.toLowerCase(),r=r.toLowerCase()),i<r?this.sortDirection==="asc"?-1:1:i>r?this.sortDirection==="asc"?1:-1:0}),this.currentPage=1},setCurrentPage(t){this.currentPage=t},setSearchId(t){this.searchId=t,this.setCurrentPage(1)},setSelectedCountryName(t){this.selectedCountryName=t,this.setCurrentPage(1)},setSelectedShowInstitutes(t){this.selectedShowInstitutes=t,this.setCurrentPage(1)},setSearchInstituteText(t){this.searchInstituteText=t,this.setCurrentPage(1)},setFranchiseFilter(t){this.franchiseFilter=t,this.setCurrentPage(1)},setPerPage(t){this.perPage=t,this.setCurrentPage(1)},addInstitute(t){this.institutes.findIndex(s=>s.id===t.id)===-1&&this.institutes.push(t)},updateInstitute(t){const e=this.institutes.findIndex(s=>s.id===t.id);e!==-1&&(this.institutes[e]={...this.institutes[e],...t})},checkInstituteExists(t){return this.institutes.filter(i=>i.country_id===t.newCountryId).some(i=>i.institute===t.newInstitute&&i.franchise===t.franchise)},updateCountryNameInInstitutes(t,e){this.institutes=this.institutes.map(s=>s.country===t?{...s,country:e}:s)},getTitlesByCountryId(t){return this.titles.filter(e=>e.country_id===t).map(e=>({title:e.title,titleType:e.title_type}))},async deleteInstitute(t){try{await n.delete(`/api/institutes/${t}`),this.institutes=this.institutes.filter(e=>e.id!==t),this.updatePagination()}catch(e){console.error("Failed to delete institute:",e)}},updatePagination(){this.currentPage>this.totalPages&&(this.currentPage=Math.max(1,this.totalPages))},deleteInstitutesByCountryId(t){console.log("deleteInstitutesByCountryId",t),this.institutes=this.institutes.filter(e=>e.country_id!==t),this.updatePagination()}}}),u=c("foreignRecognizedAcademicTitles",{state:()=>({titles:[],isLoading:!1,isLoaded:!1,currentPage:1,perPage:10,sortColumn:null,sortDirection:"asc",searchId:"",selectedCountryName:null,selectedShowInstitutes:null,searchTitleText:"",searchTitleTypeText:""}),getters:{filteredTitles:t=>t.titles.filter(e=>{const s=t.searchId?e.id.toString().startsWith(t.searchId):!0,i=t.selectedCountryName&&t.selectedCountryName!=="-1"?e.country.toLowerCase()===t.selectedCountryName.toLowerCase():!0,r=t.searchTitleText?e.title.toLowerCase().includes(t.searchTitleText.toLowerCase()):!0,o=t.searchTitleTypeText?e.title_type.toLowerCase().includes(t.searchTitleTypeText.toLowerCase()):!0;return s&&i&&r&&o}),paginatedTitles(){const t=(this.currentPage-1)*this.perPage,e=t+this.perPage;return this.filteredTitles.slice(t,e)},totalPages(){return Math.ceil(this.filteredTitles.length/this.perPage)}},actions:{broadcastUpdate(t){const e=new BroadcastChannel("title_updates");e.postMessage({type:"UPDATE_TITLE",payload:t}),e.close()},broadcastEdit(t){const e=new BroadcastChannel("title_edit");e.postMessage({type:"EDIT_TITLE",payload:t}),e.close()},async editTitle(t,e){return await n.put(`/api/edit-foreign-title/${t.title_id}`,e)},async fetchTitles(t=!1){if(this.titles.length===0||t){this.isLoading=!0;try{const e=await n.get("/api/titles");this.titles=e.data,this.isLoaded=!0}catch(e){console.error("Error fetching academic titles:",e)}finally{this.isLoading=!1}}},sortTable(t){this.sortColumn===t?this.sortDirection=this.sortDirection==="asc"?"desc":"asc":(this.sortColumn=t,this.sortDirection="asc"),this.titles.sort((e,s)=>{let i=e[t],r=s[t];return!isNaN(Number(i))&&!isNaN(Number(r))?(i=Number(i),r=Number(r)):(i=i!=null?i.toString().trim():"",r=r!=null?r.toString().trim():"",i=i.toLowerCase(),r=r.toLowerCase()),i<r?this.sortDirection==="asc"?-1:1:i>r?this.sortDirection==="asc"?1:-1:0}),this.currentPage=1},setCurrentPage(t){this.currentPage=t},setSearchId(t){this.searchId=t,this.setCurrentPage(1)},setSelectedCountryName(t){this.selectedCountryName=t,this.setCurrentPage(1)},setSelectedShowInstitutes(t){this.selectedShowInstitutes=t,this.setCurrentPage(1)},setSearchTitleText(t){this.searchTitleText=t,this.setCurrentPage(1)},setSearchTitleTypeText(t){this.searchTitleTypeText=t,this.setCurrentPage(1)},setPerPage(t){this.perPage=t,this.setCurrentPage(1)},addTitle(t){this.titles.findIndex(s=>s.id===t.id)===-1&&this.titles.push(t)},updateTitle(t){const e=this.titles.findIndex(s=>s.id===t.id);e!==-1&&(this.titles[e]={...this.titles[e],...t})},updateCountryNameInTitles(t,e){this.titles=this.titles.map(s=>s.country===t?{...s,country:e}:s)},async deleteTitle(t){try{await n.delete(`/api/titles/${t}`),this.titles=this.titles.filter(e=>e.id!==t),this.updatePagination()}catch(e){console.error("Failed to delete title:",e)}},updatePagination(){this.currentPage>this.totalPages&&(this.currentPage=Math.max(1,this.totalPages))},deleteTitlesByCountryId(t){console.log("deleteTitlesByCountryId",t),this.titles=this.titles.filter(e=>e.country_id!==t),this.updatePagination()}}}),h=l(),d=u(),y=c("countries",{state:()=>({countries:[],isLoading:!1,error:null,isLoaded:!1}),actions:{broadcastUpdate(t){const e=new BroadcastChannel("new_country");e.postMessage({type:"UPDATE_COUNTRY",payload:t}),e.close()},broadcastEdit(t){const e=new BroadcastChannel("country_updates");e.postMessage({type:"EDIT_COUNTRY",payload:t}),e.close()},broadcastDelete(t){const e=new BroadcastChannel("country_deletions");e.postMessage({type:"DELETE_COUNTRY",payload:t}),e.close()},async editCountry(t,e){try{const s=await n.put(`/api/edit-country/${t}`,e);if(s&&s.data)return this.updateCountry({id:t,country:e.country}),this.broadcastUpdate({id:t,country:e.country}),s.data}catch(s){throw this.error=s,console.error("There was an error updating the country:",s),s}},async deleteCountry(t){try{const e=await n.delete(`/api/delete-country/${t}`);if(e&&e.data)return this.countries=this.countries.filter(s=>s.id!==t),h.deleteInstitutesByCountryId(t),d.deleteTitlesByCountryId(t),this.broadcastDelete(t),e.data}catch(e){throw this.error=e,console.error("There was an error deleting the country:",e),e}},addCountry(t){if(this.countries.findIndex(s=>s.id===t.id)===-1){const s=this.countries.findIndex(i=>i.country.localeCompare(t.country)>0);s===-1?this.countries.push(t):this.countries.splice(s,0,t)}},getCountryNameById(t){const e=this.countries.find(s=>s.id===t);return e?e.country:null},updateCountry(t){this.countries=this.countries.map(e=>e.id===t.id?{...e,country:t.country}:e)},async fetchCountries(t=!1){if(!this.isLoaded||t){this.isLoading=!0,this.error=null;try{const e=await n.get("/api/countries");this.countries=e.data,this.isLoaded=!0}catch(e){this.error=e,console.error("There was an error fetching the countries:",e)}finally{this.isLoading=!1}}}}});export{y as a,u as b,l as u};
